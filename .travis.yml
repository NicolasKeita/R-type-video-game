
os: linux
language: cpp
dist: bionic

compiler:
  - gcc

name: Style, docs, and pip
cache: false
before_install:
  - pyenv global $(pyenv whence 2to3)
  - PY_CMD=python3
  - $PY_CMD -m pip install --user --upgrade conan
  - conan user
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
  - sudo apt-get install -y libsfml-dev

install:
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz
  # this is optional, but useful:
  # do a quick md5 check to ensure that the archive we downloaded did not get compromised
  - echo "f3546812c11ce7f5d64dc132a566b749 *cmake-3.3.2-Linux-x86_64.tar.gz" > cmake_md5.txt
  - md5sum -c cmake_md5.txt
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.3.2-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.3.2-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - mkdir -p ./build/
  - cd ./build/
  - conan install ../ --build=missing -g virtualenv
  - source activate.sh
  - cmake ../

script:
  - cmake --build ./

after_script:
  - cp bin/R_type_video_game ../
  - cd ../
  #run tests on network library
  - cd lib/uti/my_network/
  - mkdir -p ./build/
  - cd ./build/
  - cmake ../
  - make test
